<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Embedded on Nim Italia</title><link>https://nim-italia.github.io/embedded/</link><description>Recent content in Embedded on Nim Italia</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Fri, 01 Oct 2021 19:19:32 +0200</lastBuildDate><atom:link href="https://nim-italia.github.io/embedded/index.xml" rel="self" type="application/rss+xml"/><item><title>PCF8574</title><link>https://nim-italia.github.io/embedded/pcf8574/</link><pubDate>Fri, 01 Oct 2021 19:19:32 +0200</pubDate><guid>https://nim-italia.github.io/embedded/pcf8574/</guid><description>Scritto da Andrea Martin
In questo articolo parlerò un pò del PCF8574, ma a cosa fa capo questa strana sigla? il PCF8574 è integrato I/O expander quasi-biderezionale a 8 bit indirizzabile sul bus I2c. Il nostro Raspbery Pico ha molti pin utilizzabili come ingressi o uscite digitali, ma possono esaurirsi veramente in fretta se il nostro progetto ne richiede molti, per non parlare se poi dovessimo utilizzare un display. Allora ecco che questo piccolo ma utile componente ci da la possibilità di avere molti più pin disponibili, sia in ingresso che in uscita.</description></item><item><title>Raspberry Pico RP2040</title><link>https://nim-italia.github.io/embedded/raspberryrp2040/</link><pubDate>Tue, 21 Sep 2021 19:19:32 +0200</pubDate><guid>https://nim-italia.github.io/embedded/raspberryrp2040/</guid><description>Scritto da Andrea Martin
il Raspberry Pico è una minucscola scheda che monda un piccolo, ma potente microprocessore dalle seguenti caratteristiche:
Processore Dual-Core Arm Cortex M0+. Clock da 133Mhz. 264Kb Sram e 2MB di falsch Memory on board. Usb 1.1 26 pin I/O (multifunzione). Canali PWM, IC2, Dac-12bit. e molto altro&amp;hellip; La programmazione &amp;ldquo;naturale&amp;rdquo; di questo dispositivo è ovviamente in C, ma ne parliamo qui perchè si stà sviluppando un wrapper per poterlo utilizzare anche con Nim.</description></item><item><title>Ad5245</title><link>https://nim-italia.github.io/embedded/ad5245/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/embedded/ad5245/</guid><description>Scritto da Andrea Martin
In questo articolo vi presento l &amp;ldquo;Ad5245&amp;rdquo;, questo componente è un potenziometro digitale. Tutti abbiamo usato consciamente o incosciamente questi dispositivi, quando alzavamo ad esempio il volume dello stereo, o sia andava modificare qualche settaggio nei dispositivi elettronici. In sostanza un potenziometro (generico) è una resistenza che può variare il suo valore da un minimo, prossimo allo zero, ad un massimo che è il suo valore nominale (ad esempio 10KOhm).</description></item><item><title>Display1602</title><link>https://nim-italia.github.io/embedded/display1602/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/embedded/display1602/</guid><description>Scritto da Andrea Martin
In questo articolo, presento la libreria per gestire i display tipo 1602 pilotati via I2C. Lo ammetto questa libreria non è interamente farina del mio sacco, in quanto son partio dalle equivalenti in microPython per poi scriverle in Nim. Di mio ho aggiunto però delle procedure per gestire le stringhe sul display, ad esempio la centratura e lo scorrimento delle stesse. Se scrivere la libreria è stato comuqnue abbastanza complesso, usarla per visualizzare le nostre cose, spero di averla resa semplice.</description></item></channel></rss>