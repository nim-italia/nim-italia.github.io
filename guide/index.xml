<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guide on Nim Italia</title><link>https://nim-italia.github.io/guide/</link><description>Recent content in Guide on Nim Italia</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://nim-italia.github.io/guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Alias, Strutture Dati, Puntatori e Riferimenti</title><link>https://nim-italia.github.io/guide/strutture-dati-e-puntatori/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/strutture-dati-e-puntatori/</guid><description>Scritto da Raffaele
Alias Un alias è semplicemente un modo per poter fare riferimento ad un tipo esistente tramite un altro nome.
Se si utilizza la parola chiave distinct si definisce un tipo distinto ma che possiede lo stesso layout del tipo &amp;ldquo;sorgente&amp;rdquo;.
type Foo = uint ## Alias per un numero intero senza segno. Bar = distinct uint ## Definizione di un tipo distinto da uint ma che ha lo stesso layout ## in memoria.</description></item><item><title>Array e Sequenze</title><link>https://nim-italia.github.io/guide/array_sequenze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/array_sequenze/</guid><description>Scritto da Daniele (dadadani)
Su Nim esistono due principali tipi per gestire una lista di elementi: gli array e le sequenze. Anche se il loro obbiettivo è immagazzinare più elementi, i due oggetti hanno alcune differenze che li rendono utilizzabili in ambiti specifici.
Array Gli array su Nim sono simili a quelli del linguaggio C, sono quindi allocati nella memoria stack e hanno sempre una dimensione specifica e non modificabile.</description></item><item><title>dividere per zero in Nim</title><link>https://nim-italia.github.io/guide/div_by_zero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/div_by_zero/</guid><description>Scritto da Andrea Manzini
&amp;ldquo;verso l&amp;rsquo;infinito, e oltre&amp;rdquo; Storicamente nei calcolatori la divisione per zero, in quanto operazione impossibile, è sempre stata gestita in modo problematico. I primi calcolatori elettromeccanici si inceppavano ed entravano in un loop infinito, dal quale si poteva uscire solo con una apposita operazione o spegnendo e riaccendendo tutta la macchina, che a causa dello sforzo richiesto rischiava anche di deteriorarsi e/o subire danni fisici.
In Nim la situazione non è così drammatica ma può portare ad alcune sorprese.</description></item><item><title>Funzioni</title><link>https://nim-italia.github.io/guide/funzioni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/funzioni/</guid><description>Scritto da Raffaele
Le funzioni sono il metodo fondamentale per poter dividere un programma in più &amp;ldquo;sotto-programmi&amp;rdquo;: per dichiarare una funzione si usa proc.
# Dichiaro una funzione che prende due numeri interi con segno come # parametri e restituisce un intero. proc somma(a, b: int): int = result = a + b È possibile notare una variabile di nome result all&amp;rsquo;interno della funzione: quella è la variabile implicita usata per restituire il valore alla funzione chiamante, ma è possibile anche usare return &amp;lt;valore&amp;gt; per restituire il valore.</description></item><item><title>Nim Manuale da Battaglia</title><link>https://nim-italia.github.io/guide/manualino_nim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/manualino_nim/</guid><description>Scritto da Andrea Martin
Non sono un informatico, quindi dovrei essere la persona meno indicata per scrivere un piccolo manualino su di un linguaggio di programmazione, ed infatti non vuol essere un vero e proprio manuale o peggio un libro su cui studiare, ma più modestamente solo una raccolta di appunti o cose che solitamente dimentico come si fanno, e per quello le ho messe nero su bianco per poterle riprendere velocemente quando ne ho bisogno.</description></item><item><title>var, let e const</title><link>https://nim-italia.github.io/guide/var_let_const/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/var_let_const/</guid><description>Scritto da Andrea Manzini
questo articolo è stato tradotto da Nim by Example
var: variabili mutabili var a = &amp;#34;pippo&amp;#34; b = 0 # se non viene specificato nessun valore, e&amp;#39; inizializzato a 0 c: int # funziona, le variabili sono mutable a.add(&amp;#34;pluto&amp;#34;) b += 1 c = 3 echo a,b,c let: variabili immutabili let d = &amp;#34;tizio&amp;#34; e = 5 # f: float # errore di compilazione, la variabile deve assumere un valore # assegnare nuovi valori a queste variabili, `d` and `e`, causerebbe errore di compilazione #d.</description></item></channel></rss>